Sales Rank

A large eCommerce company wishes to list the best-selling products, overall and by category. For example, one product might be the #1056th best selling product overall but #13th best-selling product under "Sports Equipment" and the #24th best-selling product under "Safety". Describe how you would design this system.

Solution

Step 1: Scope the Problem
What we are building??
- We are only designing the components relevant to this question, and not the entire eCommerce system. 
- We should also define what the sales rank mean? Is it total sales over all time? Sales in the last month? Last week?
- We assume that each product can be in multiple categories, and that there is no concept of "subcategories."


Step 2: Make Reasonable Assumptions:
- We'll assume that the stats do not need to be 100% up-to-date. Data can be up to an hour old for most popular items.
- Precision is important for the most popular items, but a small degree of error is okay
- We'll assume that the data should be updated every hour.
- We'll assume that the categories are based strictly on the origin of the transaction


Step 3: Draw major components
								___________
	Purchase system  -------->  |		   |
								| Database |
	Frontend <-- sales rank <---|__________|

In this simple design, we store every order as soon as it comes into the database. Every hour or so, we pull sales data from the databasse by category, compute the total sales, sort it and store it in some sort of sales rank data cache(held in memory). The frontend just pulls the sales rank from this table, rather than hitting the standard database and doing its own analysis.


Step 4: Identify the Key Issues

Analytics are Expensive:
In the naive system, we periodically query the database for the number of sales in the past week for each product. This will be fairly expensive. That's running a query over all sales for all time.

Instead of listing every purchase in our db, we'll store just the total sales from the last week. Each purchase will just update the total weekly sales.

We'll use the following table
Prod Id | Total | Sun | Mon | Tues|.....Sat|

This is essentially like a circular array. Each day, we clear out the corresponding dat of the week. On each purchase, we update the total sales count for that product on that day of the week, as well as the total count.

We also need a separate table to store the associations of product IDs and categories.

		Prod ID | Category ID

To get the sales rank per category, we'll need to join these tables.


Database Writes are very Frequent
With the amount of purchases that could come in every second, we'll probably want to batch up the database writes.

Instead of immediately committing each purchase to the db, we could store the purchases in some sort of in-memory cache(as well as log file as a backup). Periodically, we'll process the log/cache data, gather the totals and update the database.


*****************************************
can we store each (along with a count) in a hash table? Yes. If each
product 10 is four bytes (which is big enough to hold up to 4 billion unique IDs) and each count
is four bytes (more than enough), then such a hash table would only take about 40 megabytes.
Even with some additional overhead and substantial system growth, we would still be able to fit
this all in memory.
*****************************************

After updating the database, we can re-run the sales rank data.

Joins are Expensive:
We could just do one join of products and categories such that each product will be listed once per category.
Rather than running thousands of queries, we could sort the data on the category first and then the sales volume. Then if we walked those results, Then if we walked those results, we would get the sales rank for each category. We would also need to do one sort of the entire table on sales number to get overall rank.

