Given a list of millions of documents, how would you find all documents that contain a list of words? The words
can appear in any order, but they must be complete words. That is, "book" does not match "bookkeeper."

Step 1: The first step is to pretend we just have a few dozen documents. How would you implement findWords in this case?

One way is to pre-process each document and create a hash table index. This hashtable would map from a word to a list of documents that contains that word.
	"books" -> {doc1, doc3, doc4}
	"many" -> {doc3, doc5, doc6}

To search for "many books", we would simply do an intersection on the values for "books" and "many" and return {doc3} as result.


Step2: Now go back to the original problem. What problems are introduced with millions of documents? 

For starters, we probably need to divide up the documents across many machines. Also, depending on a variety of factors, such as the number of possible words and the repetition of words in a document, we may not be able to fit the full hash table on one machine.

The division introduces the following key concerns:
- How will we divide up our hash table? We could divide it up by keyword, such that a given machine contains the full document list for a given word. Or, we could divide by document, such that a machine contains the keyword mapping for only a subset of the documents.

- Once we decide how to divide up the data, we may need to process a document on one machine and push the results off to other machines. What does this process look like? 

- We will need a way of knowing which machine holds a piece of data. What does this lookup table look like and where is it stored.

Step 3: 
We find solution to each of these issues. One solution is to divide up the words alphabetically by keyword such that each machine controls a range of words.

We can implement a simple algorithm in which we iterate through the keywords alphabetically storing as much much data as possible on one machine. When the machine is full, we can move to the next machine.

The advantage of this approach is that the lookup table is small and simple and each machine can store a copy of the lookup table. However, the disadvantage is that if new documents or words are added, we may need to perform an expensive shift of keywords.

To find all the documents that match a list of strings, we would first sort the list and then send each machine a lookup request for the strings that the machine owns. For eg: if out string is "after builds boat amaze banana", machine 1 would look for {"after","amaze"}

Machine 1 looks up the documents containing "after" and "amaze" and performs an intersection on these document lists. Machine 3 does the same for {banana, boat, builds} and intersets their lists.

In final step, the initial machine would do an intersection on the results from machine 1 and machine 3.