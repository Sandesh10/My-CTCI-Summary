Imagine you are building some sort of service that will be called by up to 1,000 client
applications to get simple end-of-day stock price information (open, close, high, low). You may
assume that you already have the data, and you can store it in any format you wish. How would
you design the client-facing service that provides the information to client applications? You are
responsible for the development, rollout, and ongoing monitoring and maintenance of the feed.
Describe the different methods you considered and why you would recommend your approach.
Your service can use any technologies you wish, and can distribute the information to the client
applications in any mechanism you choose.

Solution:
From the statement of the problem, we want to focus on how we actually distribute the information to clients. We can assume that we have some scripts that magically collect the information.

Different aspects:
- Client Ease of Use
- Ease for ourselves
- Flexibility for Future Demands 
- Scalability and Efficiency

Proposal #1
One option is that we could keep the data in simple text files and let clients download the data through some sort of FTP server. This would be easy to maintain in some sense, since files can be easily viewed and backed up, but it would require more complex parsing to do any sort of query. And, if additional data were added to our text file, it might break the clients' parsing mechanism.

Proposal #2
We could use a standard SQL database and let the clients plug directly into that. This would provide the following benefits:
- Easy query processing over the data, in case there are additional features we need to support. For eg: we could easily and efficiently perform a query such as "return all stocks having an open price greater than N and closing price less than M".
- Rolling back, backing up data, and security could be provided using standard database features. We don't have to "reinvent the wheel".
- Reasonably easy for the clients to integrate into existing applications.

Disadvantages:
- much heavier weight than we really need. We don't necessarily need all the complexity of a SQL backend to support a feed of a few bits of information.
- Difficult for humans to read. So, we need to implement an additional layer to view and maintain the data. This increases our implementation costs.
- Security: while a SQL db offers pretty well defined security levels, we would still need to be very careful to not give clients access that they shouldn't have.

Proposal #3

XML is another great option for distributing the information. Our data has fixed format and fixed size: company_name, open, high, low, closeing price. 
Advantages:
- very easy to distribute and it can easily be read by both machines and humans. 
- Most languages have a library to perform XML parsing. So, easier for client to implement.

Disadvantage:
- This solution sends the clients all the information, even if they only want part of it.
- Performing any queries on the data requires parsing the entire file.


