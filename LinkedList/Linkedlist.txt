Creating a Linked list

class Node {
	Node next= null;
	int data;

	public Node(int d){
		data = d;
	}

	void appendToTail(int d){
		Node end = new Node(d);
		Node n = this;
		while (n.next!=null) {
			n = n.next;
		}
		n.next = end;
	}
}

Deleting a Node from a Singly Linked List

Things to remember: 1. check for null pointer
                    2. update the head or tail pointer

Node deleteNode(Node head, int d){
	Node n= head;

	if (n.data==d){
		return head.next;  // head deleted
	}
	while(n.next!=null){
		if (n.next==d){
			n.next = n.next.next;
			return head
		}
		n = n.next;
	}
	return head;
}


"Runner" Technique
- uses two pointers to iterate through the linked list, with one ahead of the other
- For example, suppose you had a linked list a1 - >a2 - > ••• - >an - >b1 - >b2 - > ••• - >bn and you wanted to rearrange it into a1 -> b1 - >a2 - >b2 - > •.• - >an- >bn. You do not know the length of the linked list (but you
do know that the length is an even number).

Solution:
One pointer P1 (fast pointer) moves every two elements for every one move that P2 makees. When P1 hits the end of the linked list, P2 will be at the midpoint.
Then move P1 back to the front and begin "weaving" the elements. On each iteration, P2 selects an element and inserts it after P1.


Recursive Problems:
Space: O(n) where n is the depth of recursive call.
	   

